events {
  worker_connections 1024; # increase if you have lots of clients
  accept_mutex off; # set to 'on' if nginx worker_processes > 1
  # 'use epoll;' to enable for Linux 2.6+
  # 'use kqueue;' to enable for FreeBSD, OSX
}

http {
  include       /etc/nginx/mime.types;

  server {
    listen 80;
    server_name {{ takahe_domain }};
    return 301 https://{{ takahe_domain }}$request_uri;
  }

  server {
    listen 80;
    server_name {{ display_domain }};
    return 301 https://{{ display_domain }}$request_uri;
  }

  server {
    listen 443 ssl;
    client_max_body_size 4G;

    server_name {{ takahe_domain }};

    root {{ takahe_checkout_path }};

    ssl_certificate /etc/letsencrypt/live/{{ takahe_domain }}/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/{{ takahe_domain }}/privkey.pem; # managed by Certbot

    location / {
      proxy_http_version 1.1;
      proxy_set_header Host               $http_host;
      proxy_set_header X-Real-IP          $remote_addr;
      proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto  $scheme;
      proxy_set_header X-Forwarded-Host   $http_host;
      proxy_set_header Upgrade            $http_upgrade;
      proxy_set_header Connection         $connection_upgrade;

      proxy_redirect off;
      proxy_buffering off;
      proxy_pass http://localhost:8000;
    }
  }

  server {
    listen 443 ssl;
    client_max_body_size 4G;

    server_name {{ display_domain }};

    ssl_certificate /etc/letsencrypt/live/{{ takahe_domain }}/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/{{ takahe_domain }}/privkey.pem; # managed by Certbot

    location /.well-known/ {
      root {{ takahe_checkout_path }};

      proxy_http_version 1.1;
      proxy_set_header Host               $http_host;
      proxy_set_header X-Real-IP          $remote_addr;
      proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto  $scheme;
      proxy_set_header X-Forwarded-Host   $http_host;
      proxy_set_header Upgrade            $http_upgrade;
      proxy_set_header Connection         $connection_upgrade;

      proxy_redirect off;
      proxy_buffering off;
      proxy_pass http://localhost:8000;
    }

    location / {
      return 301 https://www.{{ display_domain }}$request_uri;
    }
  }

  map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
  }

}
